-- make enum with game phases
-- make logic to render each part of the game loop(koridors, corresponding rooms)
-- the main messaging script
-- make trigger for gui
start = vmath.vector3(640, 320, 0)
player = vmath.vector3(200, 200, 0)
kor = vmath.vector3(-1280, 0, 0)
PLAYER_STATE = -1
GAME_STATE = ""

door_coords = {
	vmath.vector3(320, 200, 0),
	vmath.vector3(960, 200, 0),
}


math.randomseed(os.time() + tonumber(tostring(os.clock()):reverse():sub(1,6)))
i = math.floor(math.random(100, 1150))

function update(self, dt)
	local current_time = os.time()
	
	if self.enemy and GAME_STATE ~= "final" then 
	-- Handle blinking (toggle visibility every 0.5 seconds
		-- Handle changing location (move to a new random location every second)
		if current_time - self.last_move_time >= 2 then
			new_position = vmath.vector3(math.random(100, 1100), 200, math.random(-1, 1)) -- Adjust bounds as needed
			go.set_position(new_position, self.enemy)
			self.last_move_time = current_time
		end
	end
end

local function load_start(self)
	self.level = factory.create("#startfactory", start)
	self.player = factory.create("#playerfactory", player, nil, {}, 4.0)
end

local function load_lev1_kor(self)
	if self.enemy then
		go.delete(self.enemy)
		factory.unload("#enemyfactory")
	end
	go.delete(self.level)
	player.x = 50
	go.set_position(player, self.player)
	self.level = factory.create("#koridorfactory", vmath.vector3(0, 0, 0))
	self.doors = {}
	for i, coord in ipairs(door_coords) do
		print("Creating door at:", coord)
		local door_instance = factory.create("#doorfactory", coord)
		table.insert(self.doors, door_instance)
		print("Door instance created:", door_instance)
	end
end

local function load_lev1_room(self)
	go.delete(self.level)
	go.delete(self.doors)
	factory.unload("#doorfactory")
	go.set_position(player, self.player)
	factory.unload("#koridorfactory")
	self.level = factory.create("#koridorfactory", kor)
	self.enemy = factory.create("#enemyfactory", vmath.vector3(i, 200, 0), nil, {}, 4.0)
end

local function load_final(self)
	if self.enemy then
		go.set_position(vmath.vector3(-100, -100, -2))
		factory.unload("#enemyfactory")
	end
	go.delete(self.level)
	factory.unload("#koridorfactory")
	go.set_position(player, self.player)
	self.level = factory.create("#finalfactory", vmath.vector3(0, 0, 0))	
end


local function states(self)
	if GAME_STATE == "start" then
		load_start(self)
	end
	if GAME_STATE == "level1kor" then 
		load_lev1_kor(self)
	end
	if GAME_STATE == "level1room" then
		load_lev1_room(self)
	end
	if GAME_STATE == "level2kor" then 
		load_lev1_kor(self)
	end
	if GAME_STATE == "level2room" then
		load_lev1_room(self)
	end
	if GAME_STATE == "final" then
		load_final(self)
	end

end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.last_blink_time = os.time()
	self.last_move_time = os.time()

	-- Set initial enemy visibility

	-- go.set_position(start, "#toilet")
	GAME_STATE = "start"
	states(self)
end

local function final(self)
	go.delete(self.level)
	go.delete(self.player)
	factory.create("#factory", vmath.vector3(0, 0, 1))
	timer.delay(5, false, function()
		msg.post("@system:", "exit", {code = 0})
	end)
end


function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_entered") then
		PLAYER_STATE = 1
		-- Handle the player entering the trigger
	elseif message_id == hash("trigger_exited") then
		PLAYER_STATE = -1
	end
end

function on_input(self, action_id, action)
	if action.pressed and PLAYER_STATE > 0 then
		if action_id == hash("interact") then
			PLAYER_STATE = -1
			if GAME_STATE == "start" then
				GAME_STATE = "level1kor"
			elseif GAME_STATE == "level1kor" then
				GAME_STATE = "level1room"
			elseif GAME_STATE == "level1room" then
				GAME_STATE = "level2kor"
			elseif GAME_STATE == "level2kor" then
				GAME_STATE = "level2room"
			elseif GAME_STATE == "level2room" then
				GAME_STATE = "final"
			elseif GAME_STATE == "final" then 
				final(self)
			end
			print(GAME_STATE)
			states(self)
		end
	end
end
